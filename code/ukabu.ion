import libc {...}

struct spec
{
	Sign: uint8; // NOTE(hugo): 1 bit
	Exponent: uint8; // NOTE(hugo): 8 bits
	Mantissa: uint32; // NOTE(hugo): 23 bits
}

func HexaToSpec(Hexa: uint32): spec
{
	Result: spec = {};
	Result.Sign = Hexa >> 31;
	Result.Exponent = (:uint8)((Hexa >> 23) & 0xFFFF);
	Result.Mantissa = (Hexa & 0x007FFFFF);
	return(Result);
}

func main(ArgumentCount: int, Arguments: char**): int
{
	if(ArgumentCount == 1)
	{
		TestUkabu();
	}
	if(ArgumentCount == 2)
	{
		f : float = Hexa32ToFloat(Arguments[1]);
		printf("Result = %f\n", f);
		Spec : spec = HexaToSpec(ParseHexa32(Arguments[1]));
		printf("Sign = %f\n", Spec.Sign == 1 ? -1.0 : 1.0);
		printf("Exponent = %u\n", Spec.Exponent);
		printf("Mantissa = %u\n", Spec.Mantissa);
	}

	return(0);
}

func Hexa32ToFloat(Str: char*): float
{
	Hexa : uint32 = ParseHexa32(Str);
	Memory : void* = &Hexa;
	Result : float = *(:float*)(Memory);
	return(Result);
}

func ParseHexa32(Str: char*) : uint32
{
	Assert(Str != 0, "Null string passed");
	Length : uint32 = StringLength(Str);
	Assert(Length == 10, "String length is not 10 (cf 0xFFFFFFFF)");
	Assert(Str[0] == '0', "First char is not '0'");
	Assert(Str[1] == 'x', "Second char is not 'x'");

	Result : uint32 = 0;
	PowerOf16 : uint32 = 1;
	for(Index : uint8 = 0; Index < 8; ++Index)
	{
		// NOTE(hugo): We skip 0x
		C := Str[9 - Index];
		Value := HexaToDecimal(C);
		Result += Value * PowerOf16;
		PowerOf16 *= 16;
	}
	return(Result);
}

func StringLength(Str: char*): uint32
{
	C : char* = Str;
	Result := 0;

	while(C != 0 && *C != '\0')
	{
		++C;
		++Result;
	}

	return(Result);
}

func Assert(Cond: bool, Message: char*)
{
	if(!Cond)
	{
		printf("%s\n", Message);
		#assert(false);
	}
}

func TestUkabu()
{
	printf("Performing tests...\n");
	f: float = Hexa32ToFloat("0x00000000");
	#assert(f == 0.0);
	f = Hexa32ToFloat("0xc0600000");
	#assert(f == -3.5);
	f = Hexa32ToFloat("0x3f800000");
	#assert(f == 1.0);

	// TODO(hugo): NaN !
	// TODO(hugo): For very very small values, the display will not be good

	printf("All tests passed.\n");
}
